/**
 * Sample20
 * 
 * Âêπ„ÅçÂá∫„Åó(SAY, THINK)
 */
import {
    bubbleTextArr, 
    bubbleTextArr2, 
    MessageCat1Say, 
    MessageCat2Say,
    MessageCat2Think,
    MessageByeBye,
    MessageTAIJYO} from './bubble.js';

P.preload = async function preload() {
    this.loadImage('../assets/backdrop.png','BackDrop');
    this.loadImage('../assets/cat.svg','Cat1');
    this.loadImage('../assets/cat2.svg','Cat2');
}
P.prepare = async function prepare() {
    P.stage = new P.Stage("stage");
    P.stage.addImage( P.images.BackDrop );

    P.cat = new P.Sprite("Cat");
    P.cat.setRotationStyle( P.RotationStyle.LEFT_RIGHT );
    P.cat.addImage( P.images.Cat1 );
    P.cat.addImage( P.images.Cat2 );
    P.cat.position = {x: -150, y: 0}
    P.cat.direction = 90;
    P.cat2 = new P.Sprite("Cat2");
    P.cat2.setRotationStyle( P.RotationStyle.LEFT_RIGHT );
    P.cat2.addImage( P.images.Cat1 );
    P.cat2.addImage( P.images.Cat2 );
    P.cat2.direction = -90;
    P.cat2.position = {x: 150, y: 0}
}

P.setting = async function setting() {

    const BubbleScale = {scale:{x:100,y:100}};
    P.stage.whenFlag( async function() {
        // 1ÁßíÂæÖ„Å§
        await P.wait(1000);
        
        // (‚Üì)È†ÜÁï™„Å´„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ„Å£„Å¶ÂæÖ„Å§

        //(Â∑¶) "„Åì„Çì„Å´„Å°„ÅØ„ÄÇËâØ„ÅÑÂ§©Ê∞ó„Åß„Åô„Å≠"
        await this.broadcastAndWait(MessageCat1Say, bubbleTextArr[0], 3); // 3 
        //(Âè≥) "üíö„Åì„Çì„Å´„Å°„ÅØüíöÈùíÁ©∫„Åå„Çà„ÅÑÊÑü„Åò„Åß„Åô„Å≠"
        await this.broadcastAndWait(MessageCat2Say, bubbleTextArr2[0], 1); // 1
        //(Âè≥) "„Å©„Åì„Å´„Åä„Åß„Åã„Åë„Åß„Åô„Åã"
        await this.broadcastAndWait(MessageCat2Say, bubbleTextArr2[1], 2); // 2
        //(Â∑¶) "„Å°„Çá„Å£„Å®Ëøë„Åè„ÅÆ„Çπ„Éº„Éë„Éº„Å´Ë≤∑„ÅÑÁâ©„Å´„ÅÑ„Åè„Çì„Åß„Åô„Çà"
        await this.broadcastAndWait(MessageCat1Say, bubbleTextArr[1], 1); // 1
        //(Âè≥) "„ÅÇ„Çâ„ÅÇ„Çâ„Åù„Çå„ÅØ„ÅÑ„ÅÑ„Åß„Åô„Å≠"
        await this.broadcastAndWait(MessageCat2Think, bubbleTextArr2[2], 4); // 4
        // „Åä‰∫í„ÅÑ„Å´ÈÄÄÂ†¥
        await this.broadcastAndWait(MessageByeBye, "„Åù„Çå„Åß„ÅØ„ÄÅ„Åæ„ÅüÔºÅ", 2); // 4
        this.broadcast(MessageTAIJYO);

    });
    P.cat.whenBroadcastReceived(MessageCat1Say, async function() {
        const me = this;
        // ‰∏ä‰∏ã„Å´Êè∫„Çâ„Åô„ÄÇ
        await me.repeat(10, _=>{
            me.setXY(me.position.x, me.position.y+2);
        });
        await me.repeat(10, _=>{
            me.setXY(me.position.x, me.position.y-2);
        });
    });
    P.cat.whenBroadcastReceived(MessageCat1Say, async function(text,time) {
        // Cat „ÅÆ „Éï„Ç≠„ÉÄ„Ç∑ „ÇíÂá∫„Åô
        console.log('CAT „Éï„Ç≠„ÉÄ„Ç∑ time='+time + " text="+text);
        if(time>0) {
            await this.sayForSecs(text, time, BubbleScale);
        }else{
            this.say(text);
        }
    });
    P.cat.whenBroadcastReceived(MessageTAIJYO, async function() {
        // Cat ÈÄÄÂ†¥
        console.log('Cat ÈÄÄÂ†¥');
        this.say('');
        this.direction *= -1;
        await this.while(true, _=>{
            this.moveSteps(5);
            if(this.isTouchingEdge()) {
                P.Loop.break();
            }
        });
        this.visible = false; 
    });
    P.cat2.whenBroadcastReceived(MessageTAIJYO, async function() {
        // Cat2 ÈÄÄÂ†¥
        console.log('Cat2 ÈÄÄÂ†¥');
        this.say('');
        this.direction *= -1;
        await this.while(true, _=>{
            this.moveSteps(5);
            if(this.isTouchingEdge()) {
                P.Loop.break();
            }
        });
        this.visible = false;         
    });
    P.cat2.whenBroadcastReceived(MessageCat2Say, async function() {
        const me = this;
        // ‰∏ä‰∏ã„Å´Êè∫„Çâ„Åô„ÄÇ
        await me.repeat(10, _=>{
            me.setXY(me.position.x, me.position.y+2);
        });
        await me.repeat(10, _=>{
            me.setXY(me.position.x, me.position.y-2);
        });    
    });
    P.cat2.whenBroadcastReceived(MessageCat2Say, async function(text="", time=-1) {
        // Cat2 „ÅÆ „Éï„Ç≠„ÉÄ„Ç∑ „ÇíÂá∫„Åô
        console.log('CAT2 „Éï„Ç≠„ÉÄ„Ç∑ time='+time + " text="+text);
        if(time>0) {
            await this.sayForSecs(text, time, BubbleScale);
        }else{
            this.say(text);
        }    
    });
    P.cat2.whenBroadcastReceived(MessageCat2Think, async function(text="", time=-1) {
        // Cat2 „ÅÆ „Éï„Ç≠„ÉÄ„Ç∑ „ÇíÂá∫„Åô
        console.log('CAT2 „Éï„Ç≠„ÉÄ„Ç∑ time='+time + " text="+text);
        if(time>0) {
            await this.thinkForSecs(text, time);
        }else{
            this.think(text);
        }    
    });
    P.cat.whenBroadcastReceived(MessageByeBye, async function(text="", time=-1) {
        // „Åù„Çå„Åß„ÅØ„ÄÅ„Å®„ÅÑ„ÅÜ
        console.log('CAT „Éï„Ç≠„ÉÄ„Ç∑ time='+time + " text="+text);
        await this.thinkForSecs(text, time);
    });
    P.cat2.whenBroadcastReceived(MessageByeBye, async function(text="", time=-1) {
        // „Åù„Çå„Åß„ÅØ„ÄÅ„Å®„ÅÑ„ÅÜ
        console.log('CAT2 „Éï„Ç≠„ÉÄ„Ç∑ time='+time + " text="+text);
        await this.sayForSecs(text, time);
    });

}